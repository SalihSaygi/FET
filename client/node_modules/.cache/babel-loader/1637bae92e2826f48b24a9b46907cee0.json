{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\fetih\\\\OneDrive\\\\Desktop\\\\Websites\\\\mern-stack\\\\client\\\\src\\\\contexts\\\\ConversationProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactProvider';\nimport { useSocket } from './SocketIOProvider';\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const {\n    socketItem,\n    idItem\n  } = useSocket();\n  const [socket, setSocket] = socketItem;\n  const [id, setId] = idItem;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"phkdTVzu4WHvkZgXF5isPW+7la8=\", false, function () {\n  return [useSocket, useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/fetih/OneDrive/Desktop/Websites/mern-stack/client/src/contexts/ConversationProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","children","socketItem","idItem","socket","setSocket","id","setId","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts } from './ContactProvider';\r\nimport { useSocket } from './SocketIOProvider';\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n  const { socketItem, idItem } = useSocket()\r\n  const [socket, setSocket] = socketItem;\r\n  const [id, setId] = idItem;\r\n\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n  const { contacts } = useContacts()\r\n\r\n  function createConversation(recipients) {\r\n    setConversations(prevConversations => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\r\n    setConversations(prevConversations => {\r\n      let madeChange = false\r\n      const newMessage = { sender, text }\r\n      const newConversations = prevConversations.map(conversation => {\r\n        if (arrayEquality(conversation.recipients, recipients)) {\r\n          madeChange = true\r\n          return {\r\n            ...conversation,\r\n            messages: [...conversation.messages, newMessage]\r\n          }\r\n        }\r\n\r\n        return conversation\r\n      })\r\n\r\n      if (madeChange) {\r\n        return newConversations\r\n      } else {\r\n        return [\r\n          ...prevConversations,\r\n          { recipients, messages: [newMessage] }\r\n        ]\r\n      }\r\n    })\r\n  }, [setConversations])\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', { recipients, text })\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map(recipient => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.id === recipient\r\n      })\r\n      const name = (contact && contact.name) || recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages.map(message => {\r\n      const contact = contacts.find(contact => {\r\n        return contact.id === message.sender\r\n      })\r\n      const name = (contact && contact.name) || message.sender\r\n      const fromMe = id === message.sender\r\n      return { ...message, senderName: name, fromMe }\r\n    })\r\n    \r\n    const selected = index === selectedConversationIndex\r\n    return { ...conversation, messages, recipients, selected }\r\n  })\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false\r\n\r\n  a.sort()\r\n  b.sort()\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}