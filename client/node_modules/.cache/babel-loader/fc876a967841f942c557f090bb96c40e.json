{"ast":null,"code":"// import React from \"react\";\n// // nodejs library that concatenates classes\n// import classNames from \"classnames\";\n// // nodejs library to set properties for components\n// import PropTypes from \"prop-types\";\n// // @material-ui/core components\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import AppBar from \"@material-ui/core/AppBar\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import Button from \"@material-ui/core/Button\";\n// import Hidden from \"@material-ui/core/Hidden\";\n// import Drawer from \"@material-ui/core/Drawer\";\n// // @material-ui/icons\n// import Menu from \"@material-ui/icons/Menu\";\n// // core components\n// import styles from \"../../sources/jss/headerStyle.js\";\n// const useStyles = makeStyles(styles);\n// export default function Header(props) {\n//   const classes = useStyles();\n//   const [mobileOpen, setMobileOpen] = React.useState(false);\n//   React.useEffect(() => {\n//     if (props.changeColorOnScroll) {\n//       window.addEventListener(\"scroll\", headerColorChange);\n//     }\n//     return function cleanup() {\n//       if (props.changeColorOnScroll) {\n//         window.removeEventListener(\"scroll\", headerColorChange);\n//       }\n//     };\n//   });\n//   const handleDrawerToggle = () => {\n//     setMobileOpen(!mobileOpen);\n//   };\n//   const headerColorChange = () => {\n//     const { color, changeColorOnScroll } = props;\n//     const windowsScrollTop = window.pageYOffset;\n//     if (windowsScrollTop > changeColorOnScroll.height) {\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.remove(classes[color]);\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.add(classes[changeColorOnScroll.color]);\n//     } else {\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.add(classes[color]);\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.remove(classes[changeColorOnScroll.color]);\n//     }\n//   };\n//   const { color, rightLinks, leftLinks, brand, fixed, absolute } = props;\n//   const appBarClasses = classNames({\n//     [classes.appBar]: true,\n//     [classes[color]]: color,\n//     [classes.absolute]: absolute,\n//     [classes.fixed]: fixed\n//   });\n//   const brandComponent = <Button className={classes.title}>{brand}</Button>;\n//   return (\n//     <AppBar className={appBarClasses}>\n//       <Toolbar className={classes.container}>\n//         {leftLinks !== undefined ? brandComponent : null}\n//         <div className={classes.flex}>\n//           {leftLinks !== undefined ? (\n//             <Hidden smDown implementation=\"css\">\n//               {leftLinks}\n//             </Hidden>\n//           ) : (\n//             brandComponent\n//           )}\n//         </div>\n//         <Hidden smDown implementation=\"css\">\n//           {rightLinks}\n//         </Hidden>\n//         <Hidden mdUp>\n//           <IconButton\n//             color=\"inherit\"\n//             aria-label=\"open drawer\"\n//             onClick={handleDrawerToggle}\n//           >\n//             <Menu />\n//           </IconButton>\n//         </Hidden>\n//       </Toolbar>\n//       <Hidden mdUp implementation=\"js\">\n//         <Drawer\n//           variant=\"temporary\"\n//           anchor={\"right\"}\n//           open={mobileOpen}\n//           classes={{\n//             paper: classes.drawerPaper\n//           }}\n//           onClose={handleDrawerToggle}\n//         >\n//           <div className={classes.appResponsive}>\n//             {leftLinks}\n//             {rightLinks}\n//           </div>\n//         </Drawer>\n//       </Hidden>\n//     </AppBar>\n//   );\n// }\n// Header.defaultProp = {\n//   color: \"white\"\n// };\n// Header.propTypes = {\n//   color: PropTypes.oneOf([\n//     \"primary\",\n//     \"info\",\n//     \"success\",\n//     \"warning\",\n//     \"danger\",\n//     \"transparent\",\n//     \"white\",\n//     \"rose\",\n//     \"dark\"\n//   ]),\n//   rightLinks: PropTypes.node,\n//   leftLinks: PropTypes.node,\n//   brand: PropTypes.string,\n//   fixed: PropTypes.bool,\n//   absolute: PropTypes.bool,\n//   // this will cause the sidebar to change the color from\n//   // props.color (see above) to changeColorOnScroll.color\n//   // when the window.pageYOffset is heigher or equal to\n//   // changeColorOnScroll.height and then when it is smaller than\n//   // changeColorOnScroll.height change it back to\n//   // props.color (see above)\n//   changeColorOnScroll: PropTypes.shape({\n//     height: PropTypes.number.isRequired,\n//     color: PropTypes.oneOf([\n//       \"primary\",\n//       \"info\",\n//       \"success\",\n//       \"warning\",\n//       \"danger\",\n//       \"transparent\",\n//       \"white\",\n//       \"rose\",\n//       \"dark\"\n//     ]).isRequired\n//   })\n// };","map":{"version":3,"sources":["C:/Users/fetih/OneDrive/Desktop/Websites/mern-stack/client/src/compenents/material-ui-setCompone.tsx/Header.tsx"],"names":[],"mappingssourcesContent":["// import React from \"react\";\n// // nodejs library that concatenates classes\n// import classNames from \"classnames\";\n// // nodejs library to set properties for components\n// import PropTypes from \"prop-types\";\n// // @material-ui/core components\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import AppBar from \"@material-ui/core/AppBar\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import Button from \"@material-ui/core/Button\";\n// import Hidden from \"@material-ui/core/Hidden\";\n// import Drawer from \"@material-ui/core/Drawer\";\n// // @material-ui/icons\n// import Menu from \"@material-ui/icons/Menu\";\n// // core components\n// import styles from \"../../sources/jss/headerStyle.js\";\n\n// const useStyles = makeStyles(styles);\n\n// export default function Header(props) {\n//   const classes = useStyles();\n//   const [mobileOpen, setMobileOpen] = React.useState(false);\n//   React.useEffect(() => {\n//     if (props.changeColorOnScroll) {\n//       window.addEventListener(\"scroll\", headerColorChange);\n//     }\n//     return function cleanup() {\n//       if (props.changeColorOnScroll) {\n//         window.removeEventListener(\"scroll\", headerColorChange);\n//       }\n//     };\n//   });\n//   const handleDrawerToggle = () => {\n//     setMobileOpen(!mobileOpen);\n//   };\n//   const headerColorChange = () => {\n//     const { color, changeColorOnScroll } = props;\n//     const windowsScrollTop = window.pageYOffset;\n//     if (windowsScrollTop > changeColorOnScroll.height) {\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.remove(classes[color]);\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.add(classes[changeColorOnScroll.color]);\n//     } else {\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.add(classes[color]);\n//       document.body\n//         .getElementsByTagName(\"header\")[0]\n//         .classList.remove(classes[changeColorOnScroll.color]);\n//     }\n//   };\n//   const { color, rightLinks, leftLinks, brand, fixed, absolute } = props;\n//   const appBarClasses = classNames({\n//     [classes.appBar]: true,\n//     [classes[color]]: color,\n//     [classes.absolute]: absolute,\n//     [classes.fixed]: fixed\n//   });\n//   const brandComponent = <Button className={classes.title}>{brand}</Button>;\n//   return (\n//     <AppBar className={appBarClasses}>\n//       <Toolbar className={classes.container}>\n//         {leftLinks !== undefined ? brandComponent : null}\n//         <div className={classes.flex}>\n//           {leftLinks !== undefined ? (\n//             <Hidden smDown implementation=\"css\">\n//               {leftLinks}\n//             </Hidden>\n//           ) : (\n//             brandComponent\n//           )}\n//         </div>\n//         <Hidden smDown implementation=\"css\">\n//           {rightLinks}\n//         </Hidden>\n//         <Hidden mdUp>\n//           <IconButton\n//             color=\"inherit\"\n//             aria-label=\"open drawer\"\n//             onClick={handleDrawerToggle}\n//           >\n//             <Menu />\n//           </IconButton>\n//         </Hidden>\n//       </Toolbar>\n//       <Hidden mdUp implementation=\"js\">\n//         <Drawer\n//           variant=\"temporary\"\n//           anchor={\"right\"}\n//           open={mobileOpen}\n//           classes={{\n//             paper: classes.drawerPaper\n//           }}\n//           onClose={handleDrawerToggle}\n//         >\n//           <div className={classes.appResponsive}>\n//             {leftLinks}\n//             {rightLinks}\n//           </div>\n//         </Drawer>\n//       </Hidden>\n//     </AppBar>\n//   );\n// }\n\n// Header.defaultProp = {\n//   color: \"white\"\n// };\n\n// Header.propTypes = {\n//   color: PropTypes.oneOf([\n//     \"primary\",\n//     \"info\",\n//     \"success\",\n//     \"warning\",\n//     \"danger\",\n//     \"transparent\",\n//     \"white\",\n//     \"rose\",\n//     \"dark\"\n//   ]),\n//   rightLinks: PropTypes.node,\n//   leftLinks: PropTypes.node,\n//   brand: PropTypes.string,\n//   fixed: PropTypes.bool,\n//   absolute: PropTypes.bool,\n//   // this will cause the sidebar to change the color from\n//   // props.color (see above) to changeColorOnScroll.color\n//   // when the window.pageYOffset is heigher or equal to\n//   // changeColorOnScroll.height and then when it is smaller than\n//   // changeColorOnScroll.height change it back to\n//   // props.color (see above)\n//   changeColorOnScroll: PropTypes.shape({\n//     height: PropTypes.number.isRequired,\n//     color: PropTypes.oneOf([\n//       \"primary\",\n//       \"info\",\n//       \"success\",\n//       \"warning\",\n//       \"danger\",\n//       \"transparent\",\n//       \"white\",\n//       \"rose\",\n//       \"dark\"\n//     ]).isRequired\n//   })\n// };\n"]},"metadata":{},"sourceType":"module"}